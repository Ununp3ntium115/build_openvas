/**
 * SPDX-FileCopyrightText: 2025 AI-Enhanced OpenVAS Project
 * SPDX-License-Identifier: GPL-2.0-or-later
 * 
 * Comprehensive Vulnerability Scoring System
 * Supports CVSS v2/v3.0/v3.1/v4.0, KEV, EPSS, and SSVC
 */

#ifndef VULNERABILITY_SCORING_H
#define VULNERABILITY_SCORING_H

#include <glib.h>
#include <json-glib/json-glib.h>

/**
 * @brief CVSS versions supported
 */
typedef enum {
    CVSS_VERSION_2_0,
    CVSS_VERSION_3_0,
    CVSS_VERSION_3_1,
    CVSS_VERSION_4_0
} cvss_version_t;

/**
 * @brief CVSS severity levels
 */
typedef enum {
    CVSS_SEVERITY_NONE,      // 0.0
    CVSS_SEVERITY_LOW,       // 0.1-3.9
    CVSS_SEVERITY_MEDIUM,    // 4.0-6.9
    CVSS_SEVERITY_HIGH,      // 7.0-8.9
    CVSS_SEVERITY_CRITICAL   // 9.0-10.0
} cvss_severity_t;

/**
 * @brief CVSS v2 metrics
 */
typedef struct {
    // Base metrics
    gchar *access_vector;        // L/A/N (Local/Adjacent/Network)
    gchar *access_complexity;    // H/M/L (High/Medium/Low)
    gchar *authentication;       // M/S/N (Multiple/Single/None)
    gchar *confidentiality;      // N/P/C (None/Partial/Complete)
    gchar *integrity;           // N/P/C (None/Partial/Complete)
    gchar *availability;        // N/P/C (None/Partial/Complete)
    
    // Temporal metrics (optional)
    gchar *exploitability;      // U/POC/F/H (Unproven/Proof-of-Concept/Functional/High)
    gchar *remediation_level;   // OF/TF/W/U (Official Fix/Temporary Fix/Workaround/Unavailable)
    gchar *report_confidence;   // UC/UR/C (Unconfirmed/Uncorroborated/Confirmed)
    
    // Environmental metrics (optional)
    gchar *collateral_damage;   // N/L/LM/MH/H (None/Low/Low-Medium/Medium-High/High)
    gchar *target_distribution; // N/L/M/H (None/Low/Medium/High)
    
    // Calculated scores
    gdouble base_score;
    gdouble temporal_score;
    gdouble environmental_score;
    gdouble overall_score;
} cvss_v2_t;

/**
 * @brief CVSS v3.x metrics
 */
typedef struct {
    // Base metrics
    gchar *attack_vector;        // N/A/L/P (Network/Adjacent/Local/Physical)
    gchar *attack_complexity;    // L/H (Low/High)
    gchar *privileges_required;  // N/L/H (None/Low/High)
    gchar *user_interaction;     // N/R (None/Required)
    gchar *scope;               // U/C (Unchanged/Changed)
    gchar *confidentiality;     // N/L/H (None/Low/High)
    gchar *integrity;           // N/L/H (None/Low/High)
    gchar *availability;        // N/L/H (None/Low/High)
    
    // Temporal metrics (optional)
    gchar *exploit_code_maturity; // X/U/P/F/H (Not Defined/Unproven/Proof-of-Concept/Functional/High)
    gchar *remediation_level;     // X/O/T/W/U (Not Defined/Official Fix/Temporary Fix/Workaround/Unavailable)
    gchar *report_confidence;     // X/U/R/C (Not Defined/Unknown/Reasonable/Confirmed)
    
    // Environmental metrics (optional)
    gchar *confidentiality_req;   // X/L/M/H (Not Defined/Low/Medium/High)
    gchar *integrity_req;         // X/L/M/H (Not Defined/Low/Medium/High)
    gchar *availability_req;      // X/L/M/H (Not Defined/Low/Medium/High)
    gchar *modified_attack_vector;
    gchar *modified_attack_complexity;
    gchar *modified_privileges_required;
    gchar *modified_user_interaction;
    gchar *modified_scope;
    gchar *modified_confidentiality;
    gchar *modified_integrity;
    gchar *modified_availability;
    
    // Calculated scores
    gdouble base_score;
    gdouble temporal_score;
    gdouble environmental_score;
    cvss_severity_t severity;
} cvss_v3_t;

/**
 * @brief CVSS v4.0 metrics (enhanced)
 */
typedef struct {
    // Base metrics
    gchar *attack_vector;        // N/A/L/P (Network/Adjacent/Local/Physical)
    gchar *attack_complexity;    // L/H (Low/High)
    gchar *attack_requirements;  // N/P (None/Present)
    gchar *privileges_required;  // N/L/H (None/Low/High)
    gchar *user_interaction;     // N/P/A (None/Passive/Active)
    gchar *vulnerable_system_confidentiality; // N/L/H (None/Low/High)
    gchar *vulnerable_system_integrity;       // N/L/H (None/Low/High)
    gchar *vulnerable_system_availability;    // N/L/H (None/Low/High)
    gchar *subsequent_system_confidentiality; // N/L/H (None/Low/High)
    gchar *subsequent_system_integrity;       // N/L/H (None/Low/High)
    gchar *subsequent_system_availability;    // N/L/H (None/Low/High)
    
    // Threat metrics
    gchar *exploit_maturity;     // X/U/P/F/H (Not Defined/Unreliable/Proof-of-Concept/Functional/High)
    
    // Environmental metrics
    gchar *confidentiality_req;  // X/L/M/H (Not Defined/Low/Medium/High)
    gchar *integrity_req;        // X/L/M/H (Not Defined/Low/Medium/High)
    gchar *availability_req;     // X/L/M/H (Not Defined/Low/Medium/High)
    
    // Calculated scores
    gdouble base_score;
    gdouble threat_score;
    gdouble environmental_score;
    cvss_severity_t severity;
} cvss_v4_t;

/**
 * @brief KEV (Known Exploited Vulnerabilities) information
 */
typedef struct {
    gboolean is_kev;                    // Is in CISA KEV catalog
    gchar *date_added;                  // Date added to KEV
    gchar *due_date;                    // Required action due date
    gchar *required_action;             // Required remediation action
    gchar *known_ransomware_use;        // Known ransomware campaign use
    gchar *notes;                       // Additional notes
    gint64 last_updated;                // Last update timestamp
} kev_info_t;

/**
 * @brief EPSS (Exploit Prediction Scoring System) information
 */
typedef struct {
    gdouble score;                      // EPSS score (0.0-1.0)
    gdouble percentile;                 // Percentile ranking
    gchar *date;                        // Score date
    gint64 last_updated;                // Last update timestamp
    gchar *model_version;               // EPSS model version
} epss_info_t;

/**
 * @brief SSVC (Stakeholder-Specific Vulnerability Categorization) decision
 */
typedef enum {
    SSVC_TRACK,                         // Track vulnerability
    SSVC_TRACK_STAR,                    // Track* (elevated tracking)
    SSVC_ATTEND,                        // Attend to vulnerability
    SSVC_ACT                            // Act on vulnerability immediately
} ssvc_decision_t;

/**
 * @brief SSVC information
 */
typedef struct {
    ssvc_decision_t decision;           // SSVC decision
    gchar *exploitation;                // none/poc/active
    gchar *automatable;                 // no/yes
    gchar *technical_impact;            // partial/total
    gchar *mission_impact;              // low/medium/high/very_high
    gchar *safety_impact;               // none/minor/major/hazardous/catastrophic
    gchar *public_safety_impact;        // minimal/significant/extensive
    gchar *situated_safety_impact;      // minimal/significant/extensive
    gint64 last_updated;                // Last update timestamp
} ssvc_info_t;

/**
 * @brief Comprehensive vulnerability score
 */
typedef struct {
    gchar *cve_id;                      // CVE identifier
    gchar *vulnerability_name;          // Vulnerability name
    gchar *description;                 // Description
    
    // CVSS scores
    cvss_v2_t *cvss_v2;                // CVSS v2 (may be NULL)
    cvss_v3_t *cvss_v3_0;              // CVSS v3.0 (may be NULL)
    cvss_v3_t *cvss_v3_1;              // CVSS v3.1 (may be NULL)
    cvss_v4_t *cvss_v4_0;              // CVSS v4.0 (may be NULL)
    
    // Additional scoring systems
    kev_info_t *kev;                    // KEV information
    epss_info_t *epss;                  // EPSS information
    ssvc_info_t *ssvc;                  // SSVC information
    
    // Metadata
    gchar **cwe_ids;                    // CWE identifiers
    gchar **references;                 // Reference URLs
    gchar *published_date;              // Publication date
    gchar *last_modified;               // Last modification date
    gint64 last_updated;                // Last score update
    
    // AI-enhanced fields
    gdouble ai_risk_score;              // AI-calculated risk score
    gchar *ai_priority;                 // AI-suggested priority
    gchar *ai_remediation_urgency;      // AI-suggested urgency
    JsonObject *ai_context;             // Additional AI context
} vulnerability_score_t;

/* Core scoring functions */
vulnerability_score_t *vulnerability_score_new(const gchar *cve_id);
void vulnerability_score_free(vulnerability_score_t *score);
vulnerability_score_t *vulnerability_score_copy(vulnerability_score_t *score);

/* CVSS calculation functions */
gdouble cvss_v2_calculate_base_score(cvss_v2_t *cvss);
gdouble cvss_v2_calculate_temporal_score(cvss_v2_t *cvss);
gdouble cvss_v2_calculate_environmental_score(cvss_v2_t *cvss);

gdouble cvss_v3_calculate_base_score(cvss_v3_t *cvss);
gdouble cvss_v3_calculate_temporal_score(cvss_v3_t *cvss);
gdouble cvss_v3_calculate_environmental_score(cvss_v3_t *cvss);
cvss_severity_t cvss_v3_get_severity(gdouble base_score);

gdouble cvss_v4_calculate_base_score(cvss_v4_t *cvss);
gdouble cvss_v4_calculate_threat_score(cvss_v4_t *cvss);
gdouble cvss_v4_calculate_environmental_score(cvss_v4_t *cvss);

/* CVSS parsing functions */
cvss_v2_t *cvss_v2_parse_vector(const gchar *vector_string);
cvss_v3_t *cvss_v3_parse_vector(const gchar *vector_string);
cvss_v4_t *cvss_v4_parse_vector(const gchar *vector_string);

gchar *cvss_v2_to_vector_string(cvss_v2_t *cvss);
gchar *cvss_v3_to_vector_string(cvss_v3_t *cvss);
gchar *cvss_v4_to_vector_string(cvss_v4_t *cvss);

/* External data source integration */
gboolean vulnerability_scoring_init(void);
void vulnerability_scoring_cleanup(void);

gboolean fetch_nvd_data(const gchar *cve_id, vulnerability_score_t *score);
gboolean fetch_kev_data(const gchar *cve_id, kev_info_t *kev);
gboolean fetch_epss_data(const gchar *cve_id, epss_info_t *epss);
gboolean fetch_first_data(const gchar *cve_id, ssvc_info_t *ssvc);

/* Comprehensive scoring */
vulnerability_score_t *get_comprehensive_score(const gchar *cve_id);
gboolean update_vulnerability_scores(GPtrArray *cve_list);
gboolean refresh_external_data(void);

/* AI-enhanced scoring */
gboolean ai_enhance_vulnerability_score(vulnerability_score_t *score);
gdouble ai_calculate_composite_risk_score(vulnerability_score_t *score);
gchar *ai_determine_remediation_priority(vulnerability_score_t *score);

/* Utility functions */
const gchar *cvss_severity_to_string(cvss_severity_t severity);
const gchar *ssvc_decision_to_string(ssvc_decision_t decision);
gchar *vulnerability_score_to_json(vulnerability_score_t *score);
vulnerability_score_t *vulnerability_score_from_json(const gchar *json_data);

/* Comparison and sorting */
gint vulnerability_score_compare_risk(gconstpointer a, gconstpointer b);
gint vulnerability_score_compare_cvss(gconstpointer a, gconstpointer b);
gint vulnerability_score_compare_epss(gconstpointer a, gconstpointer b);
gint vulnerability_score_compare_ai_risk(gconstpointer a, gconstpointer b);

/* Filtering functions */
GPtrArray *filter_vulnerabilities_by_severity(GPtrArray *scores, cvss_severity_t min_severity);
GPtrArray *filter_vulnerabilities_by_kev(GPtrArray *scores, gboolean kev_only);
GPtrArray *filter_vulnerabilities_by_epss(GPtrArray *scores, gdouble min_epss);
GPtrArray *filter_vulnerabilities_by_ssvc(GPtrArray *scores, ssvc_decision_t min_decision);

/* Reporting functions */
JsonObject *generate_vulnerability_report(GPtrArray *scores);
gchar *generate_executive_summary(GPtrArray *scores);
JsonArray *get_top_vulnerabilities(GPtrArray *scores, guint count);

#endif /* VULNERABILITY_SCORING_H */